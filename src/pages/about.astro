---
import Layout from '../layouts/Riyoukiyaku.astro';
---

<Layout
    title="お問い合わせ"
    description="ご質問やご意見がございましたら、以下のフォームからお気軽にお問い合わせください。"
    pubDate={new Date('2024-01-01')}
>
  <section class="contact-section">
    <h2>お問い合わせフォーム</h2>
    <p class="contact-desc">
      以下のフォームに必要事項をご記入の上、送信してください。<br />
      お急ぎの場合: <a href="mailto:beta.infoblog@gmail.com">beta.infoblog@gmail.com</a>
    </p>
    <p class="contact-desc">
      ご質問やご意見がございましたら、以下のフォームからお気軽にお問い合わせください。<br />
      なお、返信にはお時間をいただく場合がございますので、ご了承ください。
    </p>
    <p class="contact-desc">
      お問い合わせフォームを利用するに当たり、次の点にご留意ください。<br />
      ご送信いただいた内容は、当サイトの運営に関するお問い合わせに限り使用いたします。<br />
      個人情報の取り扱いについては、<a href="/policy">プライバシーポリシー</a>をご確認ください。<br />
    </p>

    <!-- メッセージ表示エリア -->
    <div id="formFeedback" class="feedback-message"></div>

    <div class="form-block">
      <h3>個人のお客様向け</h3>
      <form class="contact-form" id="personalContactForm">
        <!-- 隠しフィールド（EmailJSテンプレート用） -->
        <input type="hidden" name="form_type" value="個人のお客様" />
        <input type="hidden" name="to_email" value="beta.infoblog@gmail.com" />
        
        <div class="form-group">
          <label for="user_name">お名前 <span class="required">*</span></label>
          <input type="text" id="user_name" name="user_name" placeholder="お名前を入力してください" required />
        </div>
        <div class="form-group">
          <label for="user_email">メールアドレス <span class="required">*</span></label>
          <input type="email" id="user_email" name="user_email" placeholder="メールアドレスを入力してください" required />
        </div>
        <div class="form-group">
          <label for="message">お問い合わせ内容 <span class="required">*</span></label>
          <textarea id="message" name="message" rows="5" placeholder="お問い合わせ内容を入力してください" required></textarea>
        </div>
        <button type="submit" class="submit-button" id="personalSubmitBtn">
          <span class="btn-text">送信</span>
          <span class="loading-spinner" style="display: none;"></span>
        </button>
      </form>
    </div>

    <hr class="section-divider" />

    <div class="form-block">
      <h3>法人・団体のお客様向け</h3>
      <form class="contact-form" id="corporateContactForm">
        <!-- 隠しフィールド（EmailJSテンプレート用） -->
        <input type="hidden" name="form_type" value="法人・団体のお客様" />
        <input type="hidden" name="to_email" value="beta.infoblog@gmail.com" />
        
        <div class="form-group">
          <label for="company_name">会社名・団体名 <span class="required">*</span></label>
          <input type="text" id="company_name" name="company_name" placeholder="会社名・団体名を入力してください" required />
        </div>
        <div class="form-group">
          <label for="contact_person">ご担当者様名 <span class="required">*</span></label>
          <input type="text" id="contact_person" name="contact_person" placeholder="ご担当者様名を入力してください" required />
        </div>
        <div class="form-group">
          <label for="corporate_email">メールアドレス <span class="required">*</span></label>
          <input type="email" id="corporate_email" name="corporate_email" placeholder="メールアドレスを入力してください" required />
        </div>
        <div class="form-group">
          <label for="corporate_message">お問い合わせ内容 <span class="required">*</span></label>
          <textarea id="corporate_message" name="corporate_message" rows="5" placeholder="お問い合わせ内容を入力してください" required></textarea>
        </div>
        <button type="submit" class="submit-button" id="corporateSubmitBtn">
          <span class="btn-text">送信</span>
          <span class="loading-spinner" style="display: none;"></span>
        </button>
      </form>
    </div>
  </section>

  <style>
    .contact-section {
      padding: 2.5rem 1rem;
      background-color: #f9f9f9;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.07);
      max-width: 800px;
      margin: 2rem auto;
    }
    .contact-section h2 {
      margin-bottom: 0.5rem;
      font-size: 2rem;
      color: #222;
      text-align: center;
      letter-spacing: 0.05em;
    }
    .contact-desc {
      text-align: center;
      margin-bottom: 1.5rem;
      color: #444;
      font-size: 1.05rem;
    }
    .contact-desc a {
      color: #007bff;
      text-decoration: none;
    }
    .contact-desc a:hover {
      text-decoration: underline;
    }
    .feedback-message {
      margin: 1rem 0;
      padding: 1rem;
      border-radius: 6px;
      font-weight: 500;
      text-align: center;
      display: none;
      animation: slideIn 0.3s ease-out;
    }
    .feedback-message.success {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    .feedback-message.error {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    .form-block {
      margin-bottom: 2.5rem;
    }
    .form-block h3 {
      margin-bottom: 1rem;
      font-size: 1.2rem;
      color: #333;
      border-left: 4px solid #007bff;
      padding-left: 0.6em;
      background: #f0f8ff;
      border-radius: 4px;
      display: inline-block;
    }
    .contact-form {
      display: flex;
      flex-direction: column;
      gap: 1.2rem;
      margin-top: 0.5rem;
    }
    .form-group {
      display: flex;
      flex-direction: column;
    }
    .form-group label {
      margin-bottom: 0.4rem;
      font-weight: 600;
      color: #555;
      font-size: 1rem;
    }
    .required {
      color: #e53935;
      font-size: 0.95em;
      margin-left: 0.2em;
    }
    .form-group input,
    .form-group textarea {
      padding: 0.7rem;
      border: 2px solid #bbb;
      border-radius: 4px;
      font-size: 1rem;
      background: #fff;
      transition: border-color 0.3s ease;
    }
    .form-group input:focus,
    .form-group textarea:focus {
      border-color: #007bff;
      outline: none;
      background: #f0f8ff;
      box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
    }
    .form-group input.valid {
      border-color: #28a745;
    }
    .form-group input.invalid,
    .form-group textarea.invalid {
      border-color: #dc3545;
    }
    .submit-button {
      padding: 0.8rem 1.5rem;
      background: linear-gradient(135deg, #007bff, #0056b3);
      color: #fff;
      border: none;
      border-radius: 4px;
      font-size: 1.1rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 0.5rem;
      position: relative;
      min-width: 120px;
    }
    .submit-button:hover:not(:disabled) {
      background: linear-gradient(135deg, #0056b3, #004085);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
    }
    .submit-button:disabled {
      background: #6c757d;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    .loading-spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid #ffffff;
      border-top: 2px solid transparent;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .section-divider {
      border: none;
      border-top: 2px dashed #ccc;
      margin: 2.5rem 0 2rem 0;
    }
    @media (max-width: 600px) {
      .contact-section {
        padding: 1rem 0.2rem;
        max-width: 98vw;
      }
      .form-block h3 {
        font-size: 1rem;
        padding-left: 0.4em;
      }
      .contact-section h2 {
        font-size: 1.3rem;
      }
    }
  </style>

  <script>
    import emailjs from '@emailjs/browser';

    // 環境変数の取得と検証
    const SERVICE_ID = import.meta.env.PUBLIC_EMAILJS_SERVICE_ID;
    const TEMPLATE_ID = import.meta.env.PUBLIC_EMAILJS_TEMPLATE_ID;
    const PUBLIC_KEY = import.meta.env.PUBLIC_EMAILJS_PUBLIC_KEY;

    // デバッグ用ログ（本番環境では削除してください）
    console.log('EmailJS設定確認:');
    console.log('SERVICE_ID:', SERVICE_ID);
    console.log('TEMPLATE_ID:', TEMPLATE_ID);
    console.log('PUBLIC_KEY:', PUBLIC_KEY ? '設定済み' : '未設定');

    // 設定値の検証
    if (!SERVICE_ID || !TEMPLATE_ID || !PUBLIC_KEY) {
      console.error('EmailJS設定が不完全です。.envファイルを確認してください。');
      console.error('必要な設定:', {
        SERVICE_ID: SERVICE_ID ? '✓' : '✗',
        TEMPLATE_ID: TEMPLATE_ID ? '✓' : '✗',
        PUBLIC_KEY: PUBLIC_KEY ? '✓' : '✗'
      });
    }

    // EmailJS設定オブジェクト
    const CONFIG = {
      serviceId: SERVICE_ID,
      templateId: TEMPLATE_ID,
      publicKey: PUBLIC_KEY
    };

    // EmailJS初期化（設定が完全な場合のみ）
    if (CONFIG.publicKey) {
      try {
        emailjs.init(CONFIG.publicKey);
        console.log('EmailJS初期化完了');
      } catch (error) {
        console.error('EmailJS初期化エラー:', error);
      }
    } else {
      console.error('EmailJS Public Keyが設定されていません');
    }

    // DOM要素の取得
    const personalForm = document.getElementById('personalContactForm') as HTMLFormElement;
    const corporateForm = document.getElementById('corporateContactForm') as HTMLFormElement;
    const feedbackDiv = document.getElementById('formFeedback') as HTMLElement;

    // ユーティリティ関数
    function showMessage(text: string, type: 'success' | 'error') {
      feedbackDiv.textContent = text;
      feedbackDiv.className = `feedback-message ${type}`;
      feedbackDiv.style.display = 'block';
      
      // 5秒後に非表示
      setTimeout(() => {
        feedbackDiv.style.display = 'none';
      }, 5000);

      // 成功時は画面上部にスクロール
      if (type === 'success') {
        feedbackDiv.scrollIntoView({ behavior: 'smooth' });
      }
    }

    function toggleSubmitButton(button: HTMLButtonElement, loading: boolean) {
      const btnText = button.querySelector('.btn-text') as HTMLElement;
      const spinner = button.querySelector('.loading-spinner') as HTMLElement;
      
      button.disabled = loading;
      btnText.style.display = loading ? 'none' : 'inline';
      spinner.style.display = loading ? 'inline-block' : 'none';
    }

    function validateForm(form: HTMLFormElement): boolean {
      const requiredFields = form.querySelectorAll('[required]') as NodeListOf<HTMLInputElement | HTMLTextAreaElement>;
      let isValid = true;

      requiredFields.forEach(field => {
        const value = field.value.trim();
        
        if (!value) {
          field.classList.add('invalid');
          field.classList.remove('valid');
          isValid = false;
        } else if (field.type === 'email') {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(value)) {
            field.classList.add('invalid');
            field.classList.remove('valid');
            isValid = false;
          } else {
            field.classList.add('valid');
            field.classList.remove('invalid');
          }
        } else {
          field.classList.add('valid');
          field.classList.remove('invalid');
        }
      });

      return isValid;
    }

    async function handleFormSubmit(form: HTMLFormElement, submitButton: HTMLButtonElement) {
      // 設定値の再確認
      if (!CONFIG.serviceId || !CONFIG.templateId || !CONFIG.publicKey) {
        showMessage('システム設定エラー：EmailJS設定が不完全です。管理者にお問い合わせください。', 'error');
        console.error('EmailJS設定不完全:', CONFIG);
        return;
      }

      // バリデーション
      if (!validateForm(form)) {
        showMessage('必須項目を正しく入力してください。', 'error');
        return;
      }

      toggleSubmitButton(submitButton, true);

      try {
        // 現在の日時を追加
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'send_date';
        hiddenInput.value = new Date().toLocaleString('ja-JP');
        form.appendChild(hiddenInput);

        console.log('メール送信開始...');
        console.log('使用する設定:', {
          serviceId: CONFIG.serviceId,
          templateId: CONFIG.templateId,
          publicKey: CONFIG.publicKey ? '設定済み' : '未設定'
        });

        const result = await emailjs.sendForm(
          CONFIG.serviceId,
          CONFIG.templateId,
          form,
          CONFIG.publicKey
        );

        console.log('EmailJS送信結果:', result);

        if (result.status === 200) {
          showMessage('お問い合わせを正常に送信いたしました。ご連絡いただきありがとうございます。', 'success');
          form.reset();
          
          // バリデーションクラスをリセット
          const fields = form.querySelectorAll('.valid, .invalid');
          fields.forEach(field => {
            field.classList.remove('valid', 'invalid');
          });
        } else {
          throw new Error(`送信に失敗しました (status: ${result.status})`);
        }

      } catch (error) {
        console.error('EmailJS送信エラー:', error);
        
        let errorMessage = '送信中にエラーが発生しました。';
        
        if (error instanceof Error) {
          if (error.message.includes('public key')) {
            errorMessage = 'システム設定エラー：EmailJS設定を確認してください。';
          } else if (error.message.includes('template')) {
            errorMessage = 'テンプレート設定エラー：管理者にお問い合わせください。';
          } else if (error.message.includes('service')) {
            errorMessage = 'サービス設定エラー：管理者にお問い合わせください。';
          }
        }
        
        showMessage(errorMessage + ' しばらく時間をおいて再度お試しください。', 'error');
      } finally {
        toggleSubmitButton(submitButton, false);
      }
    }

    // イベントリスナーの設定
    if (personalForm) {
      personalForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const submitBtn = document.getElementById('personalSubmitBtn') as HTMLButtonElement;
        handleFormSubmit(personalForm, submitBtn);
      });
    }

    if (corporateForm) {
      corporateForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const submitBtn = document.getElementById('corporateSubmitBtn') as HTMLButtonElement;
        handleFormSubmit(corporateForm, submitBtn);
      });
    }

    // リアルタイムバリデーション
    function setupRealTimeValidation(form: HTMLFormElement) {
      const requiredFields = form.querySelectorAll('[required]') as NodeListOf<HTMLInputElement | HTMLTextAreaElement>;
      
      requiredFields.forEach(field => {
        field.addEventListener('blur', () => {
          const value = field.value.trim();
          
          if (!value) {
            field.classList.add('invalid');
            field.classList.remove('valid');
          } else if (field.type === 'email') {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(value)) {
              field.classList.add('invalid');
              field.classList.remove('valid');
            } else {
              field.classList.add('valid');
              field.classList.remove('invalid');
            }
          } else {
            field.classList.add('valid');
            field.classList.remove('invalid');
          }
        });

        // 入力中はバリデーションクラスをリセット
        field.addEventListener('input', () => {
          field.classList.remove('valid', 'invalid');
        });
      });
    }

    if (personalForm) setupRealTimeValidation(personalForm);
    if (corporateForm) setupRealTimeValidation(corporateForm);
  </script>
</Layout>